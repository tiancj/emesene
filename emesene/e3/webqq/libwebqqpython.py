# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libwebqqpython', [dirname(__file__)])
        except ImportError:
            import _libwebqqpython
            return _libwebqqpython
        if fp is not None:
            try:
                _mod = imp.load_module('_libwebqqpython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libwebqqpython = swig_import_helper()
    del swig_import_helper
else:
    import _libwebqqpython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Action(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libwebqqpython.new_Action(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _libwebqqpython.Action___call__(self, *args)
    def getCallback(self): return _libwebqqpython.Action_getCallback(self)
    __swig_destroy__ = _libwebqqpython.delete_Action
    __del__ = lambda self : None;
    n_actions = _swig_property(_libwebqqpython.Action_n_actions_get, _libwebqqpython.Action_n_actions_set)
    def setCallback(self, *args): return _libwebqqpython.Action_setCallback(self, *args)
Action_swigregister = _libwebqqpython.Action_swigregister
Action_swigregister(Action)
cvar = _libwebqqpython.cvar

class Caller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libwebqqpython.new_Caller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_Caller
    __del__ = lambda self : None;
    def delAction(self): return _libwebqqpython.Caller_delAction(self)
    def setAction(self, *args): return _libwebqqpython.Caller_setAction(self, *args)
    def call(self, *args): return _libwebqqpython.Caller_call(self, *args)
Caller_swigregister = _libwebqqpython.Caller_swigregister
Caller_swigregister(Caller)

class Adapter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libwebqqpython.new_Adapter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_Adapter
    __del__ = lambda self : None;
    def trigger(self, *args): return _libwebqqpython.Adapter_trigger(self, *args)
    def get_event_handler(self, *args): return _libwebqqpython.Adapter_get_event_handler(self, *args)
    def is_event_registered(self, *args): return _libwebqqpython.Adapter_is_event_registered(self, *args)
    def delete_event_handler(self, *args): return _libwebqqpython.Adapter_delete_event_handler(self, *args)
    def register_event_handler(self, *args): return _libwebqqpython.Adapter_register_event_handler(self, *args)
Adapter_swigregister = _libwebqqpython.Adapter_swigregister
Adapter_swigregister(Adapter)

class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libwebqqpython.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libwebqqpython.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libwebqqpython.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libwebqqpython.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libwebqqpython.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libwebqqpython.SwigPyIterator_equal(self, *args)
    def copy(self): return _libwebqqpython.SwigPyIterator_copy(self)
    def next(self): return _libwebqqpython.SwigPyIterator_next(self)
    def __next__(self): return _libwebqqpython.SwigPyIterator___next__(self)
    def previous(self): return _libwebqqpython.SwigPyIterator_previous(self)
    def advance(self, *args): return _libwebqqpython.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libwebqqpython.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libwebqqpython.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libwebqqpython.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libwebqqpython.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libwebqqpython.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libwebqqpython.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libwebqqpython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

ON_BUDDY_MESSAGE = _libwebqqpython.ON_BUDDY_MESSAGE
ON_GROUP_MESSAGE = _libwebqqpython.ON_GROUP_MESSAGE
ON_SEND_MESSAGE = _libwebqqpython.ON_SEND_MESSAGE
ON_RECEIVE_AVATAR = _libwebqqpython.ON_RECEIVE_AVATAR
ON_BUDDY_STATUS_CHANGE = _libwebqqpython.ON_BUDDY_STATUS_CHANGE
ON_NICK_CHANGE = _libwebqqpython.ON_NICK_CHANGE
ON_SHAKE_MESSAGE = _libwebqqpython.ON_SHAKE_MESSAGE
NO_ERROR = _libwebqqpython.NO_ERROR
PARAMETER_ERR = _libwebqqpython.PARAMETER_ERR
NETWORK_ERR = _libwebqqpython.NETWORK_ERR
WRONGPWD_ERR = _libwebqqpython.WRONGPWD_ERR
WRONGVC_ERR = _libwebqqpython.WRONGVC_ERR
WRONGUIN_ERR = _libwebqqpython.WRONGUIN_ERR
OTHER_ERR = _libwebqqpython.OTHER_ERR
class QQFaceImg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    uin = _swig_property(_libwebqqpython.QQFaceImg_uin_get, _libwebqqpython.QQFaceImg_uin_set)
    num = _swig_property(_libwebqqpython.QQFaceImg_num_get, _libwebqqpython.QQFaceImg_num_set)
    data = _swig_property(_libwebqqpython.QQFaceImg_data_get, _libwebqqpython.QQFaceImg_data_set)
    type = _swig_property(_libwebqqpython.QQFaceImg_type_get, _libwebqqpython.QQFaceImg_type_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQFaceImg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQFaceImg
    __del__ = lambda self : None;
QQFaceImg_swigregister = _libwebqqpython.QQFaceImg_swigregister
QQFaceImg_swigregister(QQFaceImg)

class Color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bold = _swig_property(_libwebqqpython.Color_bold_get, _libwebqqpython.Color_bold_set)
    italic = _swig_property(_libwebqqpython.Color_italic_get, _libwebqqpython.Color_italic_set)
    underline = _swig_property(_libwebqqpython.Color_underline_get, _libwebqqpython.Color_underline_set)
    def __init__(self): 
        this = _libwebqqpython.new_Color()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _libwebqqpython.Color_swigregister
Color_swigregister(Color)

class QQMsgFont(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libwebqqpython.QQMsgFont_name_get, _libwebqqpython.QQMsgFont_name_set)
    size = _swig_property(_libwebqqpython.QQMsgFont_size_get, _libwebqqpython.QQMsgFont_size_set)
    color = _swig_property(_libwebqqpython.QQMsgFont_color_get, _libwebqqpython.QQMsgFont_color_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQMsgFont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQMsgFont
    __del__ = lambda self : None;
QQMsgFont_swigregister = _libwebqqpython.QQMsgFont_swigregister
QQMsgFont_swigregister(QQMsgFont)

QQ_MSG_CONTENT_FACE_T = _libwebqqpython.QQ_MSG_CONTENT_FACE_T
QQ_MSG_CONTENT_STRING_T = _libwebqqpython.QQ_MSG_CONTENT_STRING_T
QQ_MSG_CONTENT_FONT_T = _libwebqqpython.QQ_MSG_CONTENT_FONT_T
QQ_MSG_CONTENT_UNKNOWN_T = _libwebqqpython.QQ_MSG_CONTENT_UNKNOWN_T
MSG_BUDDY_T = _libwebqqpython.MSG_BUDDY_T
MSG_GROUP_T = _libwebqqpython.MSG_GROUP_T
MSG_STATUS_CHANGED_T = _libwebqqpython.MSG_STATUS_CHANGED_T
MSG_KICK_T = _libwebqqpython.MSG_KICK_T
MSG_UNKNOWN_T = _libwebqqpython.MSG_UNKNOWN_T
class Birthday(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    year = _swig_property(_libwebqqpython.Birthday_year_get, _libwebqqpython.Birthday_year_set)
    month = _swig_property(_libwebqqpython.Birthday_month_get, _libwebqqpython.Birthday_month_set)
    day = _swig_property(_libwebqqpython.Birthday_day_get, _libwebqqpython.Birthday_day_set)
    def __init__(self): 
        this = _libwebqqpython.new_Birthday()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_Birthday
    __del__ = lambda self : None;
Birthday_swigregister = _libwebqqpython.Birthday_swigregister
Birthday_swigregister(Birthday)

class QQBuddy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    uin = _swig_property(_libwebqqpython.QQBuddy_uin_get, _libwebqqpython.QQBuddy_uin_set)
    qqnumber = _swig_property(_libwebqqpython.QQBuddy_qqnumber_get, _libwebqqpython.QQBuddy_qqnumber_set)
    status = _swig_property(_libwebqqpython.QQBuddy_status_get, _libwebqqpython.QQBuddy_status_set)
    is_vip = _swig_property(_libwebqqpython.QQBuddy_is_vip_get, _libwebqqpython.QQBuddy_is_vip_set)
    vip_level = _swig_property(_libwebqqpython.QQBuddy_vip_level_get, _libwebqqpython.QQBuddy_vip_level_set)
    nick = _swig_property(_libwebqqpython.QQBuddy_nick_get, _libwebqqpython.QQBuddy_nick_set)
    markname = _swig_property(_libwebqqpython.QQBuddy_markname_get, _libwebqqpython.QQBuddy_markname_set)
    country = _swig_property(_libwebqqpython.QQBuddy_country_get, _libwebqqpython.QQBuddy_country_set)
    province = _swig_property(_libwebqqpython.QQBuddy_province_get, _libwebqqpython.QQBuddy_province_set)
    city = _swig_property(_libwebqqpython.QQBuddy_city_get, _libwebqqpython.QQBuddy_city_set)
    gender = _swig_property(_libwebqqpython.QQBuddy_gender_get, _libwebqqpython.QQBuddy_gender_set)
    face = _swig_property(_libwebqqpython.QQBuddy_face_get, _libwebqqpython.QQBuddy_face_set)
    flag = _swig_property(_libwebqqpython.QQBuddy_flag_get, _libwebqqpython.QQBuddy_flag_set)
    birthday = _swig_property(_libwebqqpython.QQBuddy_birthday_get, _libwebqqpython.QQBuddy_birthday_set)
    blood = _swig_property(_libwebqqpython.QQBuddy_blood_get, _libwebqqpython.QQBuddy_blood_set)
    shengxiao = _swig_property(_libwebqqpython.QQBuddy_shengxiao_get, _libwebqqpython.QQBuddy_shengxiao_set)
    constel = _swig_property(_libwebqqpython.QQBuddy_constel_get, _libwebqqpython.QQBuddy_constel_set)
    phone = _swig_property(_libwebqqpython.QQBuddy_phone_get, _libwebqqpython.QQBuddy_phone_set)
    mobile = _swig_property(_libwebqqpython.QQBuddy_mobile_get, _libwebqqpython.QQBuddy_mobile_set)
    email = _swig_property(_libwebqqpython.QQBuddy_email_get, _libwebqqpython.QQBuddy_email_set)
    occupation = _swig_property(_libwebqqpython.QQBuddy_occupation_get, _libwebqqpython.QQBuddy_occupation_set)
    college = _swig_property(_libwebqqpython.QQBuddy_college_get, _libwebqqpython.QQBuddy_college_set)
    homepage = _swig_property(_libwebqqpython.QQBuddy_homepage_get, _libwebqqpython.QQBuddy_homepage_set)
    personal = _swig_property(_libwebqqpython.QQBuddy_personal_get, _libwebqqpython.QQBuddy_personal_set)
    lnick = _swig_property(_libwebqqpython.QQBuddy_lnick_get, _libwebqqpython.QQBuddy_lnick_set)
    allow = _swig_property(_libwebqqpython.QQBuddy_allow_get, _libwebqqpython.QQBuddy_allow_set)
    cate_index = _swig_property(_libwebqqpython.QQBuddy_cate_index_get, _libwebqqpython.QQBuddy_cate_index_set)
    client_type = _swig_property(_libwebqqpython.QQBuddy_client_type_get, _libwebqqpython.QQBuddy_client_type_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQBuddy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQBuddy
    __del__ = lambda self : None;
QQBuddy_swigregister = _libwebqqpython.QQBuddy_swigregister
QQBuddy_swigregister(QQBuddy)

class QQCategory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libwebqqpython.QQCategory_name_get, _libwebqqpython.QQCategory_name_set)
    index = _swig_property(_libwebqqpython.QQCategory_index_get, _libwebqqpython.QQCategory_index_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQCategory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQCategory
    __del__ = lambda self : None;
QQCategory_swigregister = _libwebqqpython.QQCategory_swigregister
QQCategory_swigregister(QQCategory)

class QQGroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_libwebqqpython.QQGroup_name_get, _libwebqqpython.QQGroup_name_set)
    gid = _swig_property(_libwebqqpython.QQGroup_gid_get, _libwebqqpython.QQGroup_gid_set)
    gnumber = _swig_property(_libwebqqpython.QQGroup_gnumber_get, _libwebqqpython.QQGroup_gnumber_set)
    code = _swig_property(_libwebqqpython.QQGroup_code_get, _libwebqqpython.QQGroup_code_set)
    flag = _swig_property(_libwebqqpython.QQGroup_flag_get, _libwebqqpython.QQGroup_flag_set)
    owner = _swig_property(_libwebqqpython.QQGroup_owner_get, _libwebqqpython.QQGroup_owner_set)
    mark = _swig_property(_libwebqqpython.QQGroup_mark_get, _libwebqqpython.QQGroup_mark_set)
    mask = _swig_property(_libwebqqpython.QQGroup_mask_get, _libwebqqpython.QQGroup_mask_set)
    option = _swig_property(_libwebqqpython.QQGroup_option_get, _libwebqqpython.QQGroup_option_set)
    createtime = _swig_property(_libwebqqpython.QQGroup_createtime_get, _libwebqqpython.QQGroup_createtime_set)
    gclass = _swig_property(_libwebqqpython.QQGroup_gclass_get, _libwebqqpython.QQGroup_gclass_set)
    level = _swig_property(_libwebqqpython.QQGroup_level_get, _libwebqqpython.QQGroup_level_set)
    face = _swig_property(_libwebqqpython.QQGroup_face_get, _libwebqqpython.QQGroup_face_set)
    memo = _swig_property(_libwebqqpython.QQGroup_memo_get, _libwebqqpython.QQGroup_memo_set)
    fingermemo = _swig_property(_libwebqqpython.QQGroup_fingermemo_get, _libwebqqpython.QQGroup_fingermemo_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQGroup
    __del__ = lambda self : None;
QQGroup_swigregister = _libwebqqpython.QQGroup_swigregister
QQGroup_swigregister(QQGroup)

class QQConfig(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    use_proxy = _swig_property(_libwebqqpython.QQConfig_use_proxy_get, _libwebqqpython.QQConfig_use_proxy_set)
    proxy_type = _swig_property(_libwebqqpython.QQConfig_proxy_type_get, _libwebqqpython.QQConfig_proxy_type_set)
    proxy_host = _swig_property(_libwebqqpython.QQConfig_proxy_host_get, _libwebqqpython.QQConfig_proxy_host_set)
    proxy_port = _swig_property(_libwebqqpython.QQConfig_proxy_port_get, _libwebqqpython.QQConfig_proxy_port_set)
    proxy_account = _swig_property(_libwebqqpython.QQConfig_proxy_account_get, _libwebqqpython.QQConfig_proxy_account_set)
    proxy_passcode = _swig_property(_libwebqqpython.QQConfig_proxy_passcode_get, _libwebqqpython.QQConfig_proxy_passcode_set)
    def __init__(self): 
        this = _libwebqqpython.new_QQConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libwebqqpython.delete_QQConfig
    __del__ = lambda self : None;
QQConfig_swigregister = _libwebqqpython.QQConfig_swigregister
QQConfig_swigregister(QQConfig)

class ResourceManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libwebqqpython.new_ResourceManager()
        try: self.this.append(this)
        except: self.this = this
    rw_mutex = _swig_property(_libwebqqpython.ResourceManager_rw_mutex_get, _libwebqqpython.ResourceManager_rw_mutex_set)
    def reset(self): return _libwebqqpython.ResourceManager_reset(self)
    categories = _swig_property(_libwebqqpython.ResourceManager_categories_get, _libwebqqpython.ResourceManager_categories_set)
    groups = _swig_property(_libwebqqpython.ResourceManager_groups_get, _libwebqqpython.ResourceManager_groups_set)
    contacts = _swig_property(_libwebqqpython.ResourceManager_contacts_get, _libwebqqpython.ResourceManager_contacts_set)
    group_contacts = _swig_property(_libwebqqpython.ResourceManager_group_contacts_get, _libwebqqpython.ResourceManager_group_contacts_set)
    event_queue = _swig_property(_libwebqqpython.ResourceManager_event_queue_get, _libwebqqpython.ResourceManager_event_queue_set)
    event_adapter = _swig_property(_libwebqqpython.ResourceManager_event_adapter_get, _libwebqqpython.ResourceManager_event_adapter_set)
    __swig_destroy__ = _libwebqqpython.delete_ResourceManager
    __del__ = lambda self : None;
    def lock(self): return _libwebqqpython.ResourceManager_lock(self)
    def ulock(self): return _libwebqqpython.ResourceManager_ulock(self)
ResourceManager_swigregister = _libwebqqpython.ResourceManager_swigregister
ResourceManager_swigregister(ResourceManager)

class QQPlugin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libwebqqpython.delete_QQPlugin
    __del__ = lambda self : None;
    def webqq_login(self, *args): return _libwebqqpython.QQPlugin_webqq_login(self, *args)
    def send_buddy_message(self, *args): return _libwebqqpython.QQPlugin_send_buddy_message(self, *args)
    def send_group_message(self, *args): return _libwebqqpython.QQPlugin_send_group_message(self, *args)
QQPlugin_swigregister = _libwebqqpython.QQPlugin_swigregister
QQPlugin_swigregister(QQPlugin)

class QQEventQueue(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libwebqqpython.new_QQEventQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    def pop(self): return _libwebqqpython.QQEventQueue_pop(self)
    def push(self, *args): return _libwebqqpython.QQEventQueue_push(self, *args)
    def size(self): return _libwebqqpython.QQEventQueue_size(self)
    def empty(self): return _libwebqqpython.QQEventQueue_empty(self)
    __swig_destroy__ = _libwebqqpython.delete_QQEventQueue
    __del__ = lambda self : None;
QQEventQueue_swigregister = _libwebqqpython.QQEventQueue_swigregister
QQEventQueue_swigregister(QQEventQueue)

class SingletonQQConfig(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    instance = staticmethod(_libwebqqpython.SingletonQQConfig_instance)
    getInstance = staticmethod(_libwebqqpython.SingletonQQConfig_getInstance)
    def reset(self): return _libwebqqpython.SingletonQQConfig_reset(self)
    __swig_destroy__ = _libwebqqpython.delete_SingletonQQConfig
    __del__ = lambda self : None;
SingletonQQConfig_swigregister = _libwebqqpython.SingletonQQConfig_swigregister
SingletonQQConfig_swigregister(SingletonQQConfig)

def SingletonQQConfig_instance():
  return _libwebqqpython.SingletonQQConfig_instance()
SingletonQQConfig_instance = _libwebqqpython.SingletonQQConfig_instance

def SingletonQQConfig_getInstance():
  return _libwebqqpython.SingletonQQConfig_getInstance()
SingletonQQConfig_getInstance = _libwebqqpython.SingletonQQConfig_getInstance

class SingletonQQPlugin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    instance = staticmethod(_libwebqqpython.SingletonQQPlugin_instance)
    getInstance = staticmethod(_libwebqqpython.SingletonQQPlugin_getInstance)
    def reset(self): return _libwebqqpython.SingletonQQPlugin_reset(self)
    __swig_destroy__ = _libwebqqpython.delete_SingletonQQPlugin
    __del__ = lambda self : None;
SingletonQQPlugin_swigregister = _libwebqqpython.SingletonQQPlugin_swigregister
SingletonQQPlugin_swigregister(SingletonQQPlugin)

def SingletonQQPlugin_instance():
  return _libwebqqpython.SingletonQQPlugin_instance()
SingletonQQPlugin_instance = _libwebqqpython.SingletonQQPlugin_instance

def SingletonQQPlugin_getInstance():
  return _libwebqqpython.SingletonQQPlugin_getInstance()
SingletonQQPlugin_getInstance = _libwebqqpython.SingletonQQPlugin_getInstance

class SingletonResourceManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    instance = staticmethod(_libwebqqpython.SingletonResourceManager_instance)
    getInstance = staticmethod(_libwebqqpython.SingletonResourceManager_getInstance)
    def reset(self): return _libwebqqpython.SingletonResourceManager_reset(self)
    __swig_destroy__ = _libwebqqpython.delete_SingletonResourceManager
    __del__ = lambda self : None;
SingletonResourceManager_swigregister = _libwebqqpython.SingletonResourceManager_swigregister
SingletonResourceManager_swigregister(SingletonResourceManager)

def SingletonResourceManager_instance():
  return _libwebqqpython.SingletonResourceManager_instance()
SingletonResourceManager_instance = _libwebqqpython.SingletonResourceManager_instance

def SingletonResourceManager_getInstance():
  return _libwebqqpython.SingletonResourceManager_getInstance()
SingletonResourceManager_getInstance = _libwebqqpython.SingletonResourceManager_getInstance

class map_int_qqcategory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.map_int_qqcategory_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.map_int_qqcategory___nonzero__(self)
    def __bool__(self): return _libwebqqpython.map_int_qqcategory___bool__(self)
    def __len__(self): return _libwebqqpython.map_int_qqcategory___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _libwebqqpython.map_int_qqcategory___getitem__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.map_int_qqcategory___delitem__(self, *args)
    def has_key(self, *args): return _libwebqqpython.map_int_qqcategory_has_key(self, *args)
    def keys(self): return _libwebqqpython.map_int_qqcategory_keys(self)
    def values(self): return _libwebqqpython.map_int_qqcategory_values(self)
    def items(self): return _libwebqqpython.map_int_qqcategory_items(self)
    def __contains__(self, *args): return _libwebqqpython.map_int_qqcategory___contains__(self, *args)
    def key_iterator(self): return _libwebqqpython.map_int_qqcategory_key_iterator(self)
    def value_iterator(self): return _libwebqqpython.map_int_qqcategory_value_iterator(self)
    def __setitem__(self, *args): return _libwebqqpython.map_int_qqcategory___setitem__(self, *args)
    def asdict(self): return _libwebqqpython.map_int_qqcategory_asdict(self)
    def __init__(self, *args): 
        this = _libwebqqpython.new_map_int_qqcategory(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libwebqqpython.map_int_qqcategory_empty(self)
    def size(self): return _libwebqqpython.map_int_qqcategory_size(self)
    def clear(self): return _libwebqqpython.map_int_qqcategory_clear(self)
    def swap(self, *args): return _libwebqqpython.map_int_qqcategory_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.map_int_qqcategory_get_allocator(self)
    def begin(self): return _libwebqqpython.map_int_qqcategory_begin(self)
    def end(self): return _libwebqqpython.map_int_qqcategory_end(self)
    def rbegin(self): return _libwebqqpython.map_int_qqcategory_rbegin(self)
    def rend(self): return _libwebqqpython.map_int_qqcategory_rend(self)
    def count(self, *args): return _libwebqqpython.map_int_qqcategory_count(self, *args)
    def erase(self, *args): return _libwebqqpython.map_int_qqcategory_erase(self, *args)
    def find(self, *args): return _libwebqqpython.map_int_qqcategory_find(self, *args)
    def lower_bound(self, *args): return _libwebqqpython.map_int_qqcategory_lower_bound(self, *args)
    def upper_bound(self, *args): return _libwebqqpython.map_int_qqcategory_upper_bound(self, *args)
    __swig_destroy__ = _libwebqqpython.delete_map_int_qqcategory
    __del__ = lambda self : None;
map_int_qqcategory_swigregister = _libwebqqpython.map_int_qqcategory_swigregister
map_int_qqcategory_swigregister(map_int_qqcategory)

class map_string_qqgroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.map_string_qqgroup_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.map_string_qqgroup___nonzero__(self)
    def __bool__(self): return _libwebqqpython.map_string_qqgroup___bool__(self)
    def __len__(self): return _libwebqqpython.map_string_qqgroup___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _libwebqqpython.map_string_qqgroup___getitem__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.map_string_qqgroup___delitem__(self, *args)
    def has_key(self, *args): return _libwebqqpython.map_string_qqgroup_has_key(self, *args)
    def keys(self): return _libwebqqpython.map_string_qqgroup_keys(self)
    def values(self): return _libwebqqpython.map_string_qqgroup_values(self)
    def items(self): return _libwebqqpython.map_string_qqgroup_items(self)
    def __contains__(self, *args): return _libwebqqpython.map_string_qqgroup___contains__(self, *args)
    def key_iterator(self): return _libwebqqpython.map_string_qqgroup_key_iterator(self)
    def value_iterator(self): return _libwebqqpython.map_string_qqgroup_value_iterator(self)
    def __setitem__(self, *args): return _libwebqqpython.map_string_qqgroup___setitem__(self, *args)
    def asdict(self): return _libwebqqpython.map_string_qqgroup_asdict(self)
    def __init__(self, *args): 
        this = _libwebqqpython.new_map_string_qqgroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libwebqqpython.map_string_qqgroup_empty(self)
    def size(self): return _libwebqqpython.map_string_qqgroup_size(self)
    def clear(self): return _libwebqqpython.map_string_qqgroup_clear(self)
    def swap(self, *args): return _libwebqqpython.map_string_qqgroup_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.map_string_qqgroup_get_allocator(self)
    def begin(self): return _libwebqqpython.map_string_qqgroup_begin(self)
    def end(self): return _libwebqqpython.map_string_qqgroup_end(self)
    def rbegin(self): return _libwebqqpython.map_string_qqgroup_rbegin(self)
    def rend(self): return _libwebqqpython.map_string_qqgroup_rend(self)
    def count(self, *args): return _libwebqqpython.map_string_qqgroup_count(self, *args)
    def erase(self, *args): return _libwebqqpython.map_string_qqgroup_erase(self, *args)
    def find(self, *args): return _libwebqqpython.map_string_qqgroup_find(self, *args)
    def lower_bound(self, *args): return _libwebqqpython.map_string_qqgroup_lower_bound(self, *args)
    def upper_bound(self, *args): return _libwebqqpython.map_string_qqgroup_upper_bound(self, *args)
    __swig_destroy__ = _libwebqqpython.delete_map_string_qqgroup
    __del__ = lambda self : None;
map_string_qqgroup_swigregister = _libwebqqpython.map_string_qqgroup_swigregister
map_string_qqgroup_swigregister(map_string_qqgroup)

class map_string_qqbuddy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.map_string_qqbuddy_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.map_string_qqbuddy___nonzero__(self)
    def __bool__(self): return _libwebqqpython.map_string_qqbuddy___bool__(self)
    def __len__(self): return _libwebqqpython.map_string_qqbuddy___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _libwebqqpython.map_string_qqbuddy___getitem__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.map_string_qqbuddy___delitem__(self, *args)
    def has_key(self, *args): return _libwebqqpython.map_string_qqbuddy_has_key(self, *args)
    def keys(self): return _libwebqqpython.map_string_qqbuddy_keys(self)
    def values(self): return _libwebqqpython.map_string_qqbuddy_values(self)
    def items(self): return _libwebqqpython.map_string_qqbuddy_items(self)
    def __contains__(self, *args): return _libwebqqpython.map_string_qqbuddy___contains__(self, *args)
    def key_iterator(self): return _libwebqqpython.map_string_qqbuddy_key_iterator(self)
    def value_iterator(self): return _libwebqqpython.map_string_qqbuddy_value_iterator(self)
    def __setitem__(self, *args): return _libwebqqpython.map_string_qqbuddy___setitem__(self, *args)
    def asdict(self): return _libwebqqpython.map_string_qqbuddy_asdict(self)
    def __init__(self, *args): 
        this = _libwebqqpython.new_map_string_qqbuddy(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libwebqqpython.map_string_qqbuddy_empty(self)
    def size(self): return _libwebqqpython.map_string_qqbuddy_size(self)
    def clear(self): return _libwebqqpython.map_string_qqbuddy_clear(self)
    def swap(self, *args): return _libwebqqpython.map_string_qqbuddy_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.map_string_qqbuddy_get_allocator(self)
    def begin(self): return _libwebqqpython.map_string_qqbuddy_begin(self)
    def end(self): return _libwebqqpython.map_string_qqbuddy_end(self)
    def rbegin(self): return _libwebqqpython.map_string_qqbuddy_rbegin(self)
    def rend(self): return _libwebqqpython.map_string_qqbuddy_rend(self)
    def count(self, *args): return _libwebqqpython.map_string_qqbuddy_count(self, *args)
    def erase(self, *args): return _libwebqqpython.map_string_qqbuddy_erase(self, *args)
    def find(self, *args): return _libwebqqpython.map_string_qqbuddy_find(self, *args)
    def lower_bound(self, *args): return _libwebqqpython.map_string_qqbuddy_lower_bound(self, *args)
    def upper_bound(self, *args): return _libwebqqpython.map_string_qqbuddy_upper_bound(self, *args)
    __swig_destroy__ = _libwebqqpython.delete_map_string_qqbuddy
    __del__ = lambda self : None;
map_string_qqbuddy_swigregister = _libwebqqpython.map_string_qqbuddy_swigregister
map_string_qqbuddy_swigregister(map_string_qqbuddy)

class pair_int_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libwebqqpython.new_pair_int_string(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_libwebqqpython.pair_int_string_first_get, _libwebqqpython.pair_int_string_first_set)
    second = _swig_property(_libwebqqpython.pair_int_string_second_get, _libwebqqpython.pair_int_string_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _libwebqqpython.delete_pair_int_string
    __del__ = lambda self : None;
pair_int_string_swigregister = _libwebqqpython.pair_int_string_swigregister
pair_int_string_swigregister(pair_int_string)

class list_pair_event_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.list_pair_event_string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.list_pair_event_string___nonzero__(self)
    def __bool__(self): return _libwebqqpython.list_pair_event_string___bool__(self)
    def __len__(self): return _libwebqqpython.list_pair_event_string___len__(self)
    def pop(self): return _libwebqqpython.list_pair_event_string_pop(self)
    def __getslice__(self, *args): return _libwebqqpython.list_pair_event_string___getslice__(self, *args)
    def __setslice__(self, *args): return _libwebqqpython.list_pair_event_string___setslice__(self, *args)
    def __delslice__(self, *args): return _libwebqqpython.list_pair_event_string___delslice__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.list_pair_event_string___delitem__(self, *args)
    def __getitem__(self, *args): return _libwebqqpython.list_pair_event_string___getitem__(self, *args)
    def __setitem__(self, *args): return _libwebqqpython.list_pair_event_string___setitem__(self, *args)
    def append(self, *args): return _libwebqqpython.list_pair_event_string_append(self, *args)
    def empty(self): return _libwebqqpython.list_pair_event_string_empty(self)
    def size(self): return _libwebqqpython.list_pair_event_string_size(self)
    def clear(self): return _libwebqqpython.list_pair_event_string_clear(self)
    def swap(self, *args): return _libwebqqpython.list_pair_event_string_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.list_pair_event_string_get_allocator(self)
    def begin(self): return _libwebqqpython.list_pair_event_string_begin(self)
    def end(self): return _libwebqqpython.list_pair_event_string_end(self)
    def rbegin(self): return _libwebqqpython.list_pair_event_string_rbegin(self)
    def rend(self): return _libwebqqpython.list_pair_event_string_rend(self)
    def pop_back(self): return _libwebqqpython.list_pair_event_string_pop_back(self)
    def erase(self, *args): return _libwebqqpython.list_pair_event_string_erase(self, *args)
    def __init__(self, *args): 
        this = _libwebqqpython.new_list_pair_event_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libwebqqpython.list_pair_event_string_push_back(self, *args)
    def front(self): return _libwebqqpython.list_pair_event_string_front(self)
    def back(self): return _libwebqqpython.list_pair_event_string_back(self)
    def assign(self, *args): return _libwebqqpython.list_pair_event_string_assign(self, *args)
    def resize(self, *args): return _libwebqqpython.list_pair_event_string_resize(self, *args)
    def insert(self, *args): return _libwebqqpython.list_pair_event_string_insert(self, *args)
    def pop_front(self): return _libwebqqpython.list_pair_event_string_pop_front(self)
    def push_front(self, *args): return _libwebqqpython.list_pair_event_string_push_front(self, *args)
    def reverse(self): return _libwebqqpython.list_pair_event_string_reverse(self)
    __swig_destroy__ = _libwebqqpython.delete_list_pair_event_string
    __del__ = lambda self : None;
list_pair_event_string_swigregister = _libwebqqpython.list_pair_event_string_swigregister
list_pair_event_string_swigregister(list_pair_event_string)

class pair_event_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libwebqqpython.new_pair_event_string(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_libwebqqpython.pair_event_string_first_get, _libwebqqpython.pair_event_string_first_set)
    second = _swig_property(_libwebqqpython.pair_event_string_second_get, _libwebqqpython.pair_event_string_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _libwebqqpython.delete_pair_event_string
    __del__ = lambda self : None;
pair_event_string_swigregister = _libwebqqpython.pair_event_string_swigregister
pair_event_string_swigregister(pair_event_string)

class map_string_map_string_buddy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.map_string_map_string_buddy_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.map_string_map_string_buddy___nonzero__(self)
    def __bool__(self): return _libwebqqpython.map_string_map_string_buddy___bool__(self)
    def __len__(self): return _libwebqqpython.map_string_map_string_buddy___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _libwebqqpython.map_string_map_string_buddy___getitem__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.map_string_map_string_buddy___delitem__(self, *args)
    def has_key(self, *args): return _libwebqqpython.map_string_map_string_buddy_has_key(self, *args)
    def keys(self): return _libwebqqpython.map_string_map_string_buddy_keys(self)
    def values(self): return _libwebqqpython.map_string_map_string_buddy_values(self)
    def items(self): return _libwebqqpython.map_string_map_string_buddy_items(self)
    def __contains__(self, *args): return _libwebqqpython.map_string_map_string_buddy___contains__(self, *args)
    def key_iterator(self): return _libwebqqpython.map_string_map_string_buddy_key_iterator(self)
    def value_iterator(self): return _libwebqqpython.map_string_map_string_buddy_value_iterator(self)
    def __setitem__(self, *args): return _libwebqqpython.map_string_map_string_buddy___setitem__(self, *args)
    def asdict(self): return _libwebqqpython.map_string_map_string_buddy_asdict(self)
    def __init__(self, *args): 
        this = _libwebqqpython.new_map_string_map_string_buddy(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libwebqqpython.map_string_map_string_buddy_empty(self)
    def size(self): return _libwebqqpython.map_string_map_string_buddy_size(self)
    def clear(self): return _libwebqqpython.map_string_map_string_buddy_clear(self)
    def swap(self, *args): return _libwebqqpython.map_string_map_string_buddy_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.map_string_map_string_buddy_get_allocator(self)
    def begin(self): return _libwebqqpython.map_string_map_string_buddy_begin(self)
    def end(self): return _libwebqqpython.map_string_map_string_buddy_end(self)
    def rbegin(self): return _libwebqqpython.map_string_map_string_buddy_rbegin(self)
    def rend(self): return _libwebqqpython.map_string_map_string_buddy_rend(self)
    def count(self, *args): return _libwebqqpython.map_string_map_string_buddy_count(self, *args)
    def erase(self, *args): return _libwebqqpython.map_string_map_string_buddy_erase(self, *args)
    def find(self, *args): return _libwebqqpython.map_string_map_string_buddy_find(self, *args)
    def lower_bound(self, *args): return _libwebqqpython.map_string_map_string_buddy_lower_bound(self, *args)
    def upper_bound(self, *args): return _libwebqqpython.map_string_map_string_buddy_upper_bound(self, *args)
    __swig_destroy__ = _libwebqqpython.delete_map_string_map_string_buddy
    __del__ = lambda self : None;
map_string_map_string_buddy_swigregister = _libwebqqpython.map_string_map_string_buddy_swigregister
map_string_map_string_buddy_swigregister(map_string_map_string_buddy)

class pymap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.pymap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.pymap___nonzero__(self)
    def __bool__(self): return _libwebqqpython.pymap___bool__(self)
    def __len__(self): return _libwebqqpython.pymap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _libwebqqpython.pymap___getitem__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.pymap___delitem__(self, *args)
    def has_key(self, *args): return _libwebqqpython.pymap_has_key(self, *args)
    def keys(self): return _libwebqqpython.pymap_keys(self)
    def values(self): return _libwebqqpython.pymap_values(self)
    def items(self): return _libwebqqpython.pymap_items(self)
    def __contains__(self, *args): return _libwebqqpython.pymap___contains__(self, *args)
    def key_iterator(self): return _libwebqqpython.pymap_key_iterator(self)
    def value_iterator(self): return _libwebqqpython.pymap_value_iterator(self)
    def __setitem__(self, *args): return _libwebqqpython.pymap___setitem__(self, *args)
    def asdict(self): return _libwebqqpython.pymap_asdict(self)
    def __init__(self, *args): 
        this = _libwebqqpython.new_pymap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libwebqqpython.pymap_empty(self)
    def size(self): return _libwebqqpython.pymap_size(self)
    def clear(self): return _libwebqqpython.pymap_clear(self)
    def swap(self, *args): return _libwebqqpython.pymap_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.pymap_get_allocator(self)
    def begin(self): return _libwebqqpython.pymap_begin(self)
    def end(self): return _libwebqqpython.pymap_end(self)
    def rbegin(self): return _libwebqqpython.pymap_rbegin(self)
    def rend(self): return _libwebqqpython.pymap_rend(self)
    def count(self, *args): return _libwebqqpython.pymap_count(self, *args)
    def erase(self, *args): return _libwebqqpython.pymap_erase(self, *args)
    def find(self, *args): return _libwebqqpython.pymap_find(self, *args)
    def lower_bound(self, *args): return _libwebqqpython.pymap_lower_bound(self, *args)
    def upper_bound(self, *args): return _libwebqqpython.pymap_upper_bound(self, *args)
    __swig_destroy__ = _libwebqqpython.delete_pymap
    __del__ = lambda self : None;
pymap_swigregister = _libwebqqpython.pymap_swigregister
pymap_swigregister(pymap)

class pylist(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _libwebqqpython.pylist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libwebqqpython.pylist___nonzero__(self)
    def __bool__(self): return _libwebqqpython.pylist___bool__(self)
    def __len__(self): return _libwebqqpython.pylist___len__(self)
    def pop(self): return _libwebqqpython.pylist_pop(self)
    def __getslice__(self, *args): return _libwebqqpython.pylist___getslice__(self, *args)
    def __setslice__(self, *args): return _libwebqqpython.pylist___setslice__(self, *args)
    def __delslice__(self, *args): return _libwebqqpython.pylist___delslice__(self, *args)
    def __delitem__(self, *args): return _libwebqqpython.pylist___delitem__(self, *args)
    def __getitem__(self, *args): return _libwebqqpython.pylist___getitem__(self, *args)
    def __setitem__(self, *args): return _libwebqqpython.pylist___setitem__(self, *args)
    def append(self, *args): return _libwebqqpython.pylist_append(self, *args)
    def empty(self): return _libwebqqpython.pylist_empty(self)
    def size(self): return _libwebqqpython.pylist_size(self)
    def clear(self): return _libwebqqpython.pylist_clear(self)
    def swap(self, *args): return _libwebqqpython.pylist_swap(self, *args)
    def get_allocator(self): return _libwebqqpython.pylist_get_allocator(self)
    def begin(self): return _libwebqqpython.pylist_begin(self)
    def end(self): return _libwebqqpython.pylist_end(self)
    def rbegin(self): return _libwebqqpython.pylist_rbegin(self)
    def rend(self): return _libwebqqpython.pylist_rend(self)
    def pop_back(self): return _libwebqqpython.pylist_pop_back(self)
    def erase(self, *args): return _libwebqqpython.pylist_erase(self, *args)
    def __init__(self, *args): 
        this = _libwebqqpython.new_pylist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libwebqqpython.pylist_push_back(self, *args)
    def front(self): return _libwebqqpython.pylist_front(self)
    def back(self): return _libwebqqpython.pylist_back(self)
    def assign(self, *args): return _libwebqqpython.pylist_assign(self, *args)
    def resize(self, *args): return _libwebqqpython.pylist_resize(self, *args)
    def insert(self, *args): return _libwebqqpython.pylist_insert(self, *args)
    def pop_front(self): return _libwebqqpython.pylist_pop_front(self)
    def push_front(self, *args): return _libwebqqpython.pylist_push_front(self, *args)
    def reverse(self): return _libwebqqpython.pylist_reverse(self)
    __swig_destroy__ = _libwebqqpython.delete_pylist
    __del__ = lambda self : None;
pylist_swigregister = _libwebqqpython.pylist_swigregister
pylist_swigregister(pylist)



